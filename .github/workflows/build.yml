name: C++ CI

on:
  push:
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    container: dockcross/manylinux_2_28-x64:latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache Build
      uses: actions/cache@v4
      with:
        path: build/release
        key: ${{ runner.os }}-build-${{ hashFiles('CMakeLists.txt', 'third_party/webgpu/dawn/dawn-git-tag.txt', 'third_party/sdl3-git-tag.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Install dependencies
      run: >
        dnf install -y mesa-libGL-devel libxcb libxcb-devel libX11-xcb libXcursor-devel libXrandr-devel libXinerama-devel libXi-devel libXext-devel libxkbcommon libxkbcommon-devel libxkbcommon-x11-devel mesa-vulkan-drivers wayland-protocols-devel wayland-devel

    - name: Configure CMake
      run: cmake --preset release

    - name: Build
      run: cmake --build --preset release

    - name: Upload Executable Artifact
      uses: actions/upload-artifact@v4
      with:
        name: flint-and-timber-Linux
        path: |
          build/release/flint-and-timber
          build/release/libwebgpu_dawn.so
          build/release/_deps/sdl3-build/libSDL3.so

  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache Build
      uses: actions/cache@v4
      with:
        path: build/release
        key: ${{ runner.os }}-build-${{ hashFiles('CMakeLists.txt', 'third_party/webgpu/dawn/dawn-git-tag.txt', 'third_party/sdl3-git-tag.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Set up MSBuild
      uses: microsoft/setup-msbuild@v1.3

    - name: Configure CMake
      run: cmake -S . -B build/release -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: cmake --build build/release --config Release

    - name: Stage Artifacts
      shell: cmd
      run: |
        mkdir artifact
        copy build\release\Release\flint-and-timber.exe artifact\
        copy build\release\Release\webgpu_dawn.dll artifact\
        copy build\release\_deps\sdl3-build\Release\SDL3.dll artifact\

    - name: Upload Executable Artifact
      uses: actions/upload-artifact@v4
      with:
        name: flint-and-timber-Windows
        path: artifact/

  build-macos-universal:
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache Build
      uses: actions/cache@v4
      with:
        path: |
          build/release-arm64
          build/release-x86_64
        key: ${{ runner.os }}-build-${{ hashFiles('CMakeLists.txt', 'third_party/webgpu/dawn/dawn-git-tag.txt', 'third_party/sdl3-git-tag.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Build for Apple Silicon (ARM64)
      run: |
        cmake -S . -B build/release-arm64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64
        cmake --build build/release-arm64 --config Release

    - name: Build for Intel (x86_64)
      run: |
        cmake -S . -B build/release-x86_64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64
        cmake --build build/release-x86_64 --config Release

    - name: Create Universal Binaries
      run: |
        mkdir -p artifact
        # Create universal executable
        lipo -create -output artifact/flint-and-timber \
          build/release-arm64/flint-and-timber \
          build/release-x86_64/flint-and-timber
        # Create universal dawn library
        lipo -create -output artifact/libwebgpu_dawn.dylib \
          build/release-arm64/libwebgpu_dawn.dylib \
          build/release-x86_64/libwebgpu_dawn.dylib
        # Create universal SDL3 library
        lipo -create -output artifact/libSDL3.0.dylib \
          build/release-arm64/_deps/sdl3-build/libSDL3.0.dylib \
          build/release-x86_64/_deps/sdl3-build/libSDL3.0.dylib

    - name: Upload Executable Artifact
      uses: actions/upload-artifact@v4
      with:
        name: flint-and-timber-macOS-Universal
        path: artifact/